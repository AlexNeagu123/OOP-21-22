OOP curs 2 : 

Pointeri vs Referinte?

Pointerii pot avea mai multa flexibilitate!
Trebuie sa ii validam ca nu cumva sa fie NULL.
Referintele trebuie MEREU initializate (contrar pointerilor) -> int &refi = i, nu exist int &refi
Pointerii isi pot schimba chestia la care pointeaza pe cand referintele sunt stabile la aceeasi adresa!
Se pot face operatii aritmetice cu pointeri ca sa ne jucam cu memoria, cu referintele NU! Nu putem face (&adr)++!
Pointerii pot face cast (isi schimba tipul de date la care pointeaza), referintele nu!
Pointeri la pointeri exista pe cand referinte la referinte nu!
Exista vectori de pointeri, de referinte NU!
Referintele insa pot pointa catre o variabila numerica constanta! const int &ref1 = int(12)
E posibil de facut pointeri la referinte, desi pot aparea chestii dubioase.
Referintele se prefera cand vrem sa pasam un obiect intr-o functie, astfel noi stim ca el nu poate fi null si evitam multe erori!


Method Overloading!
Method Overloading - o metoda in c++ prin care putem declara mai multe functii cu acelasi nume.
E posibil acest lucru pentru ca c++ nu diferentiaza functiile doar dupa nume, ci dupa pereche (nume, parametri + tipul parametrilor) care se mai numeste semnatura!
NU este posibil method overloading daca parametrii si numele e acelasi, chiar daca tipul de returnare difera!
Chiar daca facem un parametru initializat default pe care nu il apelam in functie, TOT se considera ca functia are doi parametri!
add(int x, int y = 0) are 2 parametri! si nu se face method overloading cu add(int x, int y)!
Nu se recomanda "..." la method overloading ca pot fi cazuri de ambiguitate!
Daca de exemplu avem o functie care primeste 2 inturi si una care primeste 2 floaturi, iar noi dam ca parametrii 2 charuri,
Apare cazul de overload resolution, compilatorul incearca sa gaseasca cea mai "apropiata" functie de ce vrem noi, cea care se preteaza
cel mai bine!!!! Este posibil si ca sa nu poata fi determinata acea functie, caz in care avem eroare de compilare!

Pasii de overload resolution (in ordinea respectiva daca nu merge): 
1. verifica potrivirea EXACTA
2. Se incearca o promovare numerica (chestii intregi trec in int), (chestii reale in double)!
   Acest lucru este facut FARA sa se piarda infomatia!
3. Se efectueaza conversia, de la un tip de date la altul, chiar daca in acest fel se pierde precizia!
   Daca exisa mai multe functii cu conversii, atunci avem eroare de ambiguitate!
4. Se incearca niste casturi daca merge vorba de pointeri.
	Din non-const in const pointer.
	Din non-const int void* sau const void*
	Din const int *void 
	NULL in 0 
5. Explicit casts, definite de noi m.inc( (char *) &d ) (vom discuta mai apoi de subiect)
6. Metoda de fallback 
7. EROAREEE!!

Fallback Methods - Functii de genul fun(...) care primesc un singur parametru variabil
Regular Methods - Functii de genul (int, short, ...) in care "..." nu e singur sunt considerate normale!
Functia de fallback chiar daca pare convenabila se utilizeaza DOAAR la final, dupa toti pasii!
Fallbackul nu isi baga coada nici la conversii, deci nu poate cauza o ambiguitate in acest sens
Sau daca se gaseste o ambiguitate la conversie, se da eroarea fara sa se tina cont de fallback!

La numar mai mare de parametri : 
Daca exista macar o pereche de functii la care se pot matchui CEL PUTIN un parametru diferit de celelalte, este considerata ambiguitate!
Daca exista o functie care matchuieste o gama larga de parametri si toate celelalte functii matchuiesc un subset din functia mare, atunci
functia mare este aleasa si nu este o ambiguitate.
Matchuieste - adica are un pas de overload resolution superior celorlaltor functii!!!! 
Trebuie sa fie un boss care are un numar mare de matchuri si toate celelalte functii nu au vreun match diferit!

Daca lucrez cu tipuri numerice, fun(int) si fun(const int) se considera aceleasi functii, cu aceeasi semnatura, deci nu putem face method overloading!
In schimb, daca vine vorba de pointeri, fun(int*) si fun(const int*) sunt diferite si avem voie sa facem method overloading!
EXACT acelasi lucru si cu referintele!
Constantele numerice mereu se duc la const int &!
fun(100) -- fun(const int &x), altfel nu se poate face match!


NULL este o definitie in unul din headere, NU un cuvant cheie din c++
implicit el are valoarea 0, deci cand apelam functii cu el se face promotia la int.
Daca vrem sa facem cast la pointeri, folosim nullptr.
In practica este bine sa NU mai folosim NULL (sunt corecte chestii gen int x = NULL) ceea ce nu e neaparat avantajos.
Este preferat nullptr. 
nullptr poate fi initializat unui pointer SAU a unei variabile boolene! 
DAAR, desi poate fi considerat si un bool, atunci cand facem method overloading mereu va fi promovat la pointer (daca exista) in detrimentul boolului!
Ambiguitati apar doar atunci cand avem mai multe functii care primesc pointeri (de diferite tipuri). In acest caz va fi neclar carui pointer sa ii fie asociat nullptr.

La ce ajuta CONST?

Daca am o chestie de genul 

int x
const int *ptr
ptr = &x 

NU merge sa modific continutul la care pointeaza ptr, adica daca fac *ptr = 1 imi da EROARE!
INSA, pot sa modific pointerul (adresa la care pointeaza). Exemplu : ptr += 1;
Daca scriem insa "int * const ptr" se intampla fix inversul, pot modifica valoarea la care se pointeaza
dar nu pot modifica adresa in sine!
Daca ne gandim un pic, chestia asta e fix cum se comporta o referinta in spate!
Putem fi si mai extremi si sa scriem const int * const ptr. In cazul asta avem un pointer cu care
nici nu putem modifica valoarea de la adresa respectiva, nici nu putem modifica pointerul in sine!
Combinatiile de genul asta le putem extinde si cand lucram cu pointeri la pointeri samd. Suntem doar atenti unde punem consturile!
Daca apelam functii de genul const int &fun(), atunci chestia returnata de functie NU poate fi modificata!
Mai exista un caz in care se utilizeaza keywordul const, si anume atunci cand lucram cu metode in clase.
Daca avem ceva de genul 
"const int& date::get() const { } " acel const de dupa parametri ne spune ca in aceasta functie NU se va modifica
informatia din nici un camp care apartine clasei!!!
Motiv pentru care am face asta : bonus de performanta!
Exista situatia in care poate dorim sa putem totusi modifica UNELE campuri dar nu pe toate si oricum sa folosim acel const.
Ca sa facem acest lucru trebuie ca in fata acelor campuri sa punem keywordul "mutable".
Acest keyword "anuleaza" efectul pe care il are acel const asupra campurilor in fata carora e utilizat!
Acest mutable poate fi folosit in combinatie cu const, daca vrem sa lucram cu pointeri!
De exemplu daca spunem ceva de genul "const mutable int * p" noi putem modifica adresa la care pointeaza p in interiorul unei metode const {} dar 
nu putem modifica valoarea!
Detaliu Important : Acel const {} de dupa apelul functiei se refera la campurile NON-statice! Daca in schimb campul este static "static int x",
el nu apartine instantei, ci apartine intregii clase (ca o variabila globala). Acest variabile statice POT fi modificate in interiorul unei functii const {}!
Tinem cont si de faptul ca acel const {} isi aplica proprietatile anume pe instanta pe care este apelata. Putem modifica valorile din campurile altor instante in schimb intr-o
functie const fara nici un fel de problema!
Daca vrem insa sa ne asiguram ca obiectul pe care il dam ca parametru nu se poate NICI EL modifica, atunci trebuie sa pasam acel obiect cu const in fata!
Exemplu : void increment (const Date &d).
Putem folosi const si ca un camp din clasa (De exemplu const int x) doar ca trebuie si initializat!

Keywordul "Friend"! 
In definirea clasei putem specifica si asa zicesele functii "friend", carora le dam efectiv accesul de a accesa variabilele private dintr-o instanta de clasa!
Putem pune si o CLASA dupa keywordul friend, prin care specificam ca toate metodele clasei friend AU ACCES la campurile private din clasa noastra!
