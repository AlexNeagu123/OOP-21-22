Mostenirile sunt niste declarari de clase prin care noi specificam ca se transfera proprietati din alte clase!
Mosteniri : 
	
	1) Simpla : class <class_name>: <acces modifier> <base class> { } 
	2) Multipla : class <class_name>: <access modifier> <base class 1> ,
					  <access modifier> <base class 2> , 
					  ...
	{ } 
	
	Daca nu specificam modificator de acces, se considera privat 

La mosteniri poate avea o problema. Daca clasa A are un camp privat si clasa B care mosteneste clasa A incearca sa il acceseze, va da eroare! Campul ramane private si in cazul mostenirilor!
Solutie : acces modifierul PROTECTED! Acest modificator de acces poate fi accesat de clasele care mostenesc clasa respectiva, dar nu pot fi accesat din alta parte!
Practic din perspectiva claselor derivate, protected = public. In toate celelalte contexte protected = private!
Functia friend e friend pentru obiectul in care a fost definita, ci nu pentru obiectul primit ca parametru!

<acces modifier> pe care il scriem atunci cand declaram mostenirea este important. Daca folosim public (class Derived : public Base {}), atunci modificatorii de acces ai campurilor raman aceeasi ca in clasa 
de baza. Daca in schimb <access modifie> este private, toate campurile din clasa de baza devin private in clasa derivata! Daca <access modifier> este protected, atunci public devine protected.
private > protected > public 
Constructorii se apeleaza si ei cand initializam o clasa derivata. Intai se apeleaza constructorul clasei de baza, dupa constructorul clasei derivate. Pentru destructori ordinea se schimba!
La constructorul clasei derivate compiratorul mai face automat un apel catre constructorul clasei de baza.
Daca avem mostenire multipla se apeleaza constructorii in ordinea in care au fost declarate mostenirile iar clasa derivata la final! Pentru destructori invers.
Exemplu : class C: public B, public A -> ordinea constructorilor: B,A,C .. ordinea destructorilor: C,A,B.
Daca in clasa derivata nu definim constructori oricum se vor apela constructorii din clasele de baza!

	Atentie : Constructorii claselor de baza se apeleaza automat daca sunt default! Daca primesc parametrii trebuie neaparat sa specificam noi in constructorul clasei derivate cum instantiem constructorul
din clasa de baza. 
	Exemplu : class C : public B, public A { C() : A(100) ... } A fiind constructorul clasei a definit prin forma A(int x) { ... } 
	Daca in clasa de mai sus scriem C() : A(100), B(), ORDINEA de apel a constructorilor oricum ramane B,A,C (NU se schimba)!

Daca avem un caz de genul 

class D: public B, public A {
	C c;
public:
	D(): c(true), A(100), B() 

Observam ca desi D nu este derivat din C oricum avem o data membru de tip C care tot are un constructor ce trebuie apelat! 
In cazul asta prioritate au constructorii claselor de baza (DIN care se face derivarea) dupa care constructorii datelor membru!
Deci, prioritatea pentru cazul de mai sus este B,A,C,D! 
Daca mai adaugam date membru, ordinea ramane cea in care le-am declarat, nu conteaza in ce ordin le apelam in lista de initializare!


Exista cazuri cand o metoda din clasa derivata coincide cu o metoda din clasa de baza. In acest caz, metoda din clasa derivata are prioritate (O suprascrie pe cea din clasa de baza)!
Exista un caz mai ciudat cand avem doua clase A,B, ambele cu o metoda Set, iar in main facem A *a = &b. Aparent e posibila o astfel de castare. In acest caz chiar daca avem o adresa a unui obiect de tip B, 
faptul ca pointerul este de tip A face sa aiba prioritate functia set din clasa A! Practic acea metoda apartine clasei si nu instantei! Ca sa facem ca o metoda sa apartina instantei folosim keywordul
virtual. Exemplu : virtual void Set() {..} in clasa A. In acest caz, in exemplul A *a = &b, prioritate are metoda din clasa B, pentru ca acel virtual method din clasa A apartine unei instante!
Metodele virtuale ajuta in special cand vine vorba de polimorfism.

Polimorfismul : Abilitatea de a accesa instante diferite ale claselor prin aceeasi interfata. In C++, asta inseamna abilitatea de a converti automat (a casta) un pointer de la o clasa anumita din clasa de
baza! 
Important este sa specificam virtual si la destructor.
Daca am de exemplu o clasa Figure, respectiv doua clase derivate din Figure : Square si Circle, pot face o astfel de declarare, Figure *f[2]. f[0] = new Square(), f[1] = new Circle().. 
Doar ca trebuie sa am grija ca atunci cand dau delete(f[0]), respectiv delete(f[1]) sa se apeleze specific destructorii din Square si Circle si nu cel din Figure cum are loc by default!
Pentru acest lucru, destructorul din Figure il fac virtual!
ATENTIE : daca am o metoda virtuala este foarte important sa aiba aceeasi semnatura cu cea din clasa derivata. Altfel, se va face un fel de method overloading si chiar daca este virtuala, metoda din clasa 
de baza oricum va fi apelata!
Un keyword destul de explicit care se poate folosi, desi nu schimba cu nimic executia codului dar e util pentru compilator si pentru noi pentru a indica ce vrem sa facem este "override"!
Daca scriu override specific compilatorului ca functia din clasa derivata trebuie sa o suprascrie pe cea din clasa de baza in castari de pointeri cum a fost cel de mai sus. 
Daca scriu acest override compilatorul imi va da eroare de compilare daca signatura din clasa derivata difera de cea din clasa de baza. (Ne atentioneaza ca nu facem corect acel override).
Recomandare : folosim override ca un good coding practice. 

Daca de exemplu dorim sa nu mai permitem nimanui sa suprascrie o anumita metoda intr-o clasa derivata putem folosi keywordul "final"! 
Daca il folosim, se va da o eroare de compilare daca se va incerca un override la acea functie intr-o clasa derivata.
Putem folosi override si final in acelasi timp. 
Override = se suprascrie functia din clasa de baza in clasa derivata!
Final = aceasta functie nu mai poate fi suprascrisa daca facem derivari din aceasta clasa
- Putem face si o clasa sa fie finala 
Exemplu struct B final : public A.
Prin aceasta declarare specificam ca nimeni nu mai poate sa deriveze din clasa B!


In memorie daca folosim virtual la unele metode din clasa, in mod implicit atunci cand se aloca memorie pentru clasa respectiva se va mai adauga ceva pe stack!
Pe langa datele membru normale, prima oara pe stack se va adauga un pointer catre o LISTA de adrese ale tuturor metodelor virtuale declarate in acea clasa! 
Acest pointer se numeste vfptr.
Exemplu : intr-o alocare de genul 
		int a1, a2, a3;
		virtual void Set() { printf("A"); } 

Stiva din memorie va arata in felul urmator : 
	
	a.a3
	a.a2	
	a.a1
	a.vfptr

Iar a.vfptr pointeaza catre o lista care contine adresele metodelor virtuale. (In cazul nostru doar adresa metodei virtuale set)!
In constructorul pe care i-am declarata in clasa, compilatorul fix la inceput adauga un cod prin care se asigura ca acest vfptr pointeaza corect la inceputul unei liste de metode!
Daca nu am definit noi constructori, oricum compilatorul creeaza automat unul in care adauga acest cod pentru vfptr!
Interesant e ca daca am o metoda virtual intr-o clasa si o apelez cu o instanta a unui obiect (de exemplu A a; a.Calcul()), nu se foloseste nicaieri acel vfptr. Apeleaza functia calcul basic, fara sa o ia 
de pe o lista oarecare.
Daca in schimb fac un pointer (A *a2 = &a) si apelez a2 -> Calcul(), atunci se preia efectiv adresa de pe vfptr. (Atunci cand lucrez cu pointeri apare un potential polimorfism).
Daca de exemplu alterez vfptr-ul unei instante de obiect (lui a2) (o schimb cu un memcpy din alt obiect sau ceva) si dupa creez o noua instanta de obiect A a3 = *a2, constructorul clasei a ii seteaza
lui a3 vfptr-ul bun (nu pe cel alterat al lui a2!)

Covariance - practic daca avem un caz de inheritance si definim doua metode virtuale cu acelasi nume, DOAR DACA merge vorba despre clase derivate putem schimba tipul de return al acelei functii. 
Totusi, doar in cazuri particulare de exemplu am clasa A in care am o functie virtuala clone() de tip A* .. SE PERMITE daca am o clasa B care deriveaza clasa A sa am o functie virtuala de tip B*!
Important e sa schimbam tipul de return doar la tipul metodei derivate!


Clase abstracte : 
	Metodele Virtuale dintr-o clasa pot fi "goale" adica sa se declare ceva de genul virtual void Set() = 0;
	In cazul acesta, daca metoda nu are un body ci are doar "=0" la sfarsit este numita metoda "pura".
	Daca avem o astfel de clasa ea NU poate fi instantiata. 
	Practic, singura ei utilitate e sa FORTAM clasele care o deriveaza sa defineasca acele functii si sa le scrie codul. 
	Clasele care contin astfel de metode virtuale se numesc clase abstracte si sunt utile atunci cand vrem sa fortam clasele derivate sa implementeze anumite metode. 
Exista in alte limbaje (C#, Java) si conceptul de interfata, care difera de clasele abstracte prin faptul ca contin DOAR metode virtuale si nu pot contine deloc date membru sau altfel de metode. 
Putem simula comportamentul unei astfel de interfete in C++ declarand de exemplu o structura in care definim doar metode virtuale care folosesc "=0" la final. 


Cum se reprezinta in memorie derivarile(mostenirile)? 
Atunci cand facem ceva de genul class C: public A, public B, in memorie se introduc intai datele membru din A, apoi datele membru din B, apoi datele membru din C cu offseturile respective. 
Pot aparea cazuri de ambiguitate daca facem ceva de genul
class A ..
class B: public A ..
class C : public A, public B ...

In acest caz datele membru din A se pun de doua ori in memoria care se declara pentru C, iar atunci cand incercam sa apelam ceva din A apare o eroare de ambiguitate, compilatorul nu stie la ce offset sa se
duca. 
O solutie ar fi sa folosim c.A::a1 daca ne referim la a1 din A sau c.B::A::a1 daca ne referim la cel din B. 
Intrebarea este : ce sa fac daca nici nu vreau sa se declare in felul asta doua date membru de acelasi fel?
Raspuns : folosesc derivarile virtuale!

Daca scriu un cod de genul 
class B: public virtual A ...
class C: public virtual A, public B

In spate se intampla mai multe lucruri.
Prin faptul ca C il deriveaza virtual pe A, C-ul este fortat sa isi mai creeze in memorie la inceput un pointer care pointeaza catre o tabela cu offseturi.
In acea tabela cu offseturi gasim in primul rand deplasamentul lui C fata de adresa primei date membru (in majoritatea cazurilor este 0) si respectiv offseturile adreselor primelor date membru ale 
claselor VIRTUALE fata de clasa derivata actuala. 
By default la derivarile virtuale, clasa din care se deriveaza virtual se pune la final in alinierea in memorie pentru clasa derivata (in cazul de mai sus A se pune la un offset de final fata de C), iar
datorita acelui pointer din C catre tabela de offseturi se tine cont de aceste lucruri!
